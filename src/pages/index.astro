---
import Play from '../../public/Play.astro'
import Stop from '../../public/Stop.astro'
import Record from '../../public/Record.astro'
import Alert from '../components/Alert.astro'
import InputRange from '../components/InputRange.astro'
import InputSelect from '../components/InputSelect.astro'
import ThemeToggle from '../components/ThemeToggle.astro'
import Layout from '../layouts/Layout.astro'
import Button from '../components/Button.astro'
---

<Layout title="TextoVoz" description="Convierte tu texto escrito a voz natural">
	<main class="container m-auto grid min-h-screen grid-rows-[auto,1fr,auto] px-4 min-w-[320px]">
		<header class="text-2xl font-bold leading-[4rem] max-sm:text-xl dark:text-white">
			TextoVoz
		</header>
		<section class="flex flex-col gap-6">
			<article class="flex gap-6 flex-wrap max-sm:justify-center">
				<div class="grid gap-2 w-full max-w-[125px] sm:max-w-[150px] dark:text-white">
					<label>Idioma</label>
					<InputSelect id="idioma">
						<option>Sin resultados</option>
					</InputSelect>
				</div>
				<div class="grid gap-2 w-full max-w-[125px] sm:max-w-[250px] dark:text-white">
					<label>Voz</label>
					<InputSelect id="voz">
						<option>Sin resultados</option>
					</InputSelect>
				</div>
				<div class="grid gap-2 w-full max-w-[125px] sm:max-w-[150px] dark:text-white">
					<label>Tono</label>
					<InputRange id="tono" min={0} max={10} value={5} />
				</div>
				<div class="grid gap-2 w-full max-w-[125px] sm:max-w-[150px] dark:text-white">
					<label>Velocidad</label>
					<InputRange id="velocidad" min={0} max={10} value={5}/>
				</div>
				<div class="grid gap-2 w-full max-w-[125px] sm:max-w-[150px] dark:text-white">
					<label>Volumen</label>
					<InputRange id="volumen" min={0} max={10} value={10}/>
				</div>
			</article>
			<fieldset id="boxArea" class="border p-2 h-full rounded-lg border-gray-900 dark:border-white dark:text-white bg-gray-100 dark:bg-gray-900">
				<legend>
					<div class="flex gap-2 justify-center">
						<Button id="play" title="reproducir">
							<Play class="group-active:scale-90 text-green-600"/>
						</Button>
						<Button id="stop" title="parar">
							<Stop class="group-active:scale-90 text-gray-600" />
						</Button>
						<Button id="record" title="grabar" classAlt="relative">
							<span id="icon-record-anim" class="absolute hidden animate-ping size-4 left-0 right-0 top-0 bottom-0 m-auto rounded-full bg-red-500 opacity-75"></span>
							<Record class="group-active:scale-90 text-red-600"/>						
						</Button>
					</div>
				</legend>
				<textarea id="text" placeholder="Aqui tu mensaje de texto" class="p-1 h-full w-full min-h-64 outline-none bg-transparent dark:text-gray-100"/>
			</fieldset>
		</section>
		<footer class="text-center leading-[2rem] opacity-70 text-sm dark:text-white">
			Creado por üë®‚Äçüíª@joarieldev
		</footer>
		<ThemeToggle />
		<Alert />
	</main>
</Layout>

<script is:inline>
	const idiomaSelect = document.getElementById("idioma")
	const vozSelect = document.getElementById("voz")
	const playButton = document.getElementById("play")
	const stopButton = document.getElementById("stop")
	const recordButton = document.getElementById("record")
	const tonoInput = document.getElementById("tono")
	const velocidadInput = document.getElementById("velocidad")
	const volumenInput = document.getElementById("volumen")
	const textTextArea = document.getElementById("text")
	const iconRecordAnim = document.getElementById("icon-record-anim")

	const synth = speechSynthesis
	const message = new SpeechSynthesisUtterance()
	const recognition = new webkitSpeechRecognition()
	recognition.continuous = true
	recognition.lang = 'es-AR'
	synth.cancel()

	let recordController = new AbortController()
	let idiomaFilter = []
	let isRecording = false
	
	const loadVoices=()=>{
		const mySet = new Set()
		synth.getVoices().forEach(voice => {
			mySet.add(voice.lang)
		})
		const options = Array.from(mySet).map(item => {
			return `<option value="${item}">${item}</option>`
		})
		options.unshift('<option>Seleccione</option>');
		idiomaSelect.innerHTML = options
	}

	idiomaSelect.addEventListener("change", () => {
		const value = idiomaSelect.value
		idiomaFilter = synth.getVoices().filter(item=>item.lang === value)
		const options = idiomaFilter.map((voice) => {
			return `<option value="${voice.name}">${voice.name}</option>`
		})
		vozSelect.innerHTML = idiomaFilter.length !== 0 ? options : '<option>Sin resultados</option>'
	})

	vozSelect.addEventListener("change", () => {
		const value = vozSelect.value
		voiceFind = idiomaFilter.find(item => item.name === value)
	})

	playButton.addEventListener("click", () => {
		synth.cancel()
		if (isRecording) {
			endRecording()
		}
		const value = vozSelect.value
		const voiceFind = idiomaFilter.find(item => item.name === value)
		if (textTextArea.value !== '' && voiceFind) {
			message.text = textTextArea.value
			message.voice = voiceFind
			message.pitch = tonoInput.value/5
			message.rate = velocidadInput.value/5
			message.volume = volumenInput.value/10
			synth.speak(message)
		}else{
			if (textTextArea.value === '') {
				warningAnimation("boxArea")
			}
			if (!voiceFind) {
				warningAnimation("idioma")
				warningAnimation("voz")
			}
		}
	})

	stopButton.addEventListener("click", () => {
		synth.cancel()
		if (isRecording) {
			endRecording()
		}
	})

	recordButton.addEventListener("click", () => {
		synth.cancel()
		if(!isRecording){
			startRecording()
		}else{
			endRecording()
		}
	})
	const startRecording = () => {
		isRecording = true
		recognition.start()
		iconRecordAnim.classList.remove("hidden")
		recognition.addEventListener('result', (event) => {
			const transcript = Array.from(event.results)
				.map((result) => result[0])
				.map((result) => result.transcript)
				.join(' ')
			textTextArea.value = transcript
		},{
      signal: recordController.signal
    })
	}
	const endRecording = () => {
		isRecording=false
		recognition.stop()
		iconRecordAnim.classList.add("hidden")
		recordController.abort()
    recordController = new AbortController()
	}

	const warningAnimation = (id) => {
		let delay = 0;
		for (let i = 0; i < 3; i++) {
			setTimeout(() => {
				document.getElementById(id).classList.add("border-red-500","dark:border-red-300")
				setTimeout(() => {
					document.getElementById(id).classList.remove("border-red-500","dark:border-red-300")
				}, 500);
			}, delay);
			delay += 1000
		}
	}

	//Manejo del scroll para input-range
	const scrollInputRange = (e, input) => {
		if (e.deltaY < 0) {
				input.value = Math.min(parseInt(input.value) + 1, input.max)
		} else {
				input.value = Math.max(parseInt(input.value) - 1, input.min)
		}
	}
	tonoInput.addEventListener("wheel", (e) => {
		e.preventDefault()
		scrollInputRange(e, tonoInput)		
	})
	velocidadInput.addEventListener("wheel", (e) => {
		e.preventDefault()
		scrollInputRange(e, velocidadInput)
	})
	volumenInput.addEventListener("wheel", (e) => {
		e.preventDefault()
		scrollInputRange(e, volumenInput)
	})

	document.body.onload = loadVoices

</script>
